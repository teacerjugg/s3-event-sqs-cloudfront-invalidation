# #+LANGUAGE: ja
#+STARTUP: overview
#+STARTUP: hidestars
#+OPTIONS: date:nil author:nil title:nil lang:nil
#+EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:

# #+TITLE: S3イベント通知によるCloudFrontのキャッシュクリア
#+DATE:

#+LATEX: \tableofcontents\clearpage

* S3イベント通知によるCloudFrontのキャッシュクリア
** 構成
#+CAPTION: リソース構成図
#+LABEL: fig:aws_resource
#+ATTR_LATEX: :float t :height 0.5\paperheight :align center
#+ATTR_HTML: :width 300 :float wrap :align center

TODO

** 事前準備
- AWS CLIのインストール[fn:aws_cli]
- Terraformのインストール[fn:terraform]
- Rustのインストール[fn:rust]
- Cargo Lambdaのインストール[fn:cargo_lambda]

[fn:aws_cli] https://aws.amazon.com/jp/cli/
[fn:terraform] https://www.terraform.io/
[fn:rust] https://www.rust-lang.org/
[fn:cargo_lambda] https://github.com/cargo-lambda/cargo-lambda

** 使用方法
1. （任意） ~terraform~ ディレクトリ配下に環境毎のディレクトリを作成する（ ~dev~ や ~prod~ など）
2. ~terraform/dev~ を参考に，プロバイダおよび各モジュールを設定する
3. ~main.tf~ を作成したディレクトリに ~terraform.tfvars~ を作成し，以下のようにS3バケット名とCloudFrontディストリビューションIDの連想配列を設定する
   #+BEGIN_SRC terraform :caption 変数の設定例 :label lst:terraform_variable
     # terraform.tfvars
     s3_bucket_cloudfront_map = {
       # "バケット名" = "ディストリビューションID"
       "test-bucket" = "E2GPOD6OSBK7CL"
     }
   #+END_SRC
4. （任意）AWS CLIにプロファイル[fn:aws_profile]を設定している場合やAPIキーを使用する場合は ~mise~ [fn:mise]や ~direnv~ [fn:direnv]を使用して，環境変数を設定する
   #+BEGIN_SRC toml :caption ~mise~ を使用して環境変数に接続するプロファイルを設定 :label lst:aws_profile
     # miseを使用した場合の環境変数の設定例

     [env]
     AWS_PROFILE = "test-profile"
   #+END_SRC
5. ~terraform init~ を実行してプロバイダの取得およびモジュールの読込みを行なう
6. ~terraform plan~ で作成されるリソースを確認して， ~terraform apply~ でリソースを作成する

[fn:aws_profile] https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-files.html#cli-configure-files-format-profile
[fn:mise] https://mise.jdx.dev/
[fn:direnv] https://direnv.net/

** 補足
*** ディレクトリ構成
#+BEGIN_SRC bash :caption ディレクトリ構成 :label lst:directory
  /
  ├── README.md
  ├── docs/
  │  └── README.org # README.mdの生成用
  ├── s3-event-sqs-clear-cloudfront-cache/ # キャッシュ削除用のLambdaにデプロイするコード
  │  ├── Cargo.lock
  │  ├── Cargo.toml
  │  ├── src/
  │  └── target/
  └── terraform/ # デプロイ用のTerraform
    ├── dev/     # テスト用の環境
    └── modules/ # モジュールディレクトリ
#+END_SRC

*** なぜLambdaの実行にSchedulerを使用しているのか
TODO

# S3イベント通知から直接Lambdaを呼び出した場合にはファイル更新のたびに実行されてしまう
# SQSからイベントソースマッピングを使用した場合はバッチサイズを設定しても数メッセージでLambdaの処理が始まってしまう


